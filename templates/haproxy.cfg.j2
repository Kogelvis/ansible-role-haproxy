global
    log 127.0.0.1 local0
{% if haproxy_socket != '' %}
    stats socket {{ haproxy_socket }} level admin
{% endif %}
    ssl-dh-param-file /etc/haproxy/dhparams.pem
{% if haproxy_chroot != '' %}
    chroot {{ haproxy_chroot }}
{% endif %}
    user {{ haproxy_user }}
    group {{ haproxy_group }}
    daemon
{% for global_var in haproxy_global_vars %}
    {{ global_var }}
{% endfor %}

defaults
    log global
    mode  http
    option  httplog
    option  dontlognull
{% if haproxy_version == '1.4' %}
    contimeout {{ haproxy_connect_timeout }}
    clitimeout {{ haproxy_client_timeout }}
    srvtimeout {{ haproxy_server_timeout }}
{% else %}
    timeout connect {{ haproxy_connect_timeout }}
    timeout client {{ haproxy_client_timeout }}
    timeout server {{ haproxy_server_timeout }}
{% endif %}
{% if ansible_os_family == 'Debian' %}
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http
{% endif %}

{% if haproxy_stats_enabled %}
frontend stats
    bind *:9000
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}
{% endif %}

{% set certs = [] %}
{% for backend in haproxy_backends|dict2items %}
{{ certs.append(backend.value.certificate_path) }}
{% endfor %}

frontend {{ haproxy_frontend_name }}
    bind {{ haproxy_frontend_bind_address }}:{{ haproxy_frontend_port }}
    bind {{ haproxy_frontend_bind_address }}:443 v4v6 ssl crt {{ certs|join(' crt ') }}
    mode {{ haproxy_frontend_mode }}
    http-request redirect scheme https unless { ssl_fc } || { path -i -m beg /.well-known/acme-challenge/ }
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains;" if { ssl_fc }
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header Content-Security-Policy "{{ haproxy_csp }}"
    http-response set-header Referrer-Policy "same-origin"
    use_backend {{ haproxy_backend_name }} if { path -i -m beg /.well-known/acme-challenge/ }
{% for backend in haproxy_backends|dict2items %}
{% for url in backend.value.urlpatterns %}
    use_backend {{ backend.key }} if { hdr(host) -i {{ url }} } { src {{ backend.value.allow_from|join(' } || { src ') }} }
{% endfor %}
{% endfor %}
    default_backend {{ haproxy_backend_name }}

{% for backend in haproxy_backends|dict2items %}
backend {{ backend.key }}
    mode {{ haproxy_backend_mode }}
    balance {{ haproxy_backend_balance_method }}
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    option forwardfor
{% if backend.value.httpchk is defined %}
    option httpchk {{ backend.value.httpchk }}
{% else %}
    option httpchk {{ haproxy_backend_httpchk }}
{% endif %}
    cookie SERVERID insert indirect
{% for server in backend.value.nodes %}
    server {{ server.name }} {{ server.address }} cookie {{ server.name }} check
{% endfor %}
{% endfor %}
