---
- name: Ensure HAProxy is installed.
  package: name=haproxy state=present

- name: Ensure rsyslog is installed
  package: name=rsyslog state=present

- name: Ensure rsyslog is started and enabled on boot.
  service: name=rsyslog state=started enabled=yes

- name: rsyslog load udp listener
  ansible.builtin.lineinfile:
    dest: /etc/rsyslog.conf
    regexp: '^#?module\\\(load="imudp"\\\)'
    line: 'module(load="imudp") # needs to be done just once'
    state: present
  notify: restart rsyslog

- name: rsyslog listen locally on udp
  ansible.builtin.lineinfile:
    dest: /etc/rsyslog.conf
    regexp: '^#?input\\\(type="imudp" port="514"'
    line: 'input(type="imudp" port="514" address="127.0.0.1")'
    state: present
  notify: restart rsyslog

- name: Place haproxy rsyslog config
  template:
    src: haproxy.conf.j2
    dest: /etc/rsyslog.d/haproxy.conf
    mode: 0644
  notify: restart rsyslog

- name: Ensure HAProxy is enabled (so init script will start it on Debian).
  lineinfile:
    dest: /etc/default/haproxy
    regexp: "^ENABLED.+$"
    line: "ENABLED=1"
    state: present
  when: ansible_os_family == 'Debian'

- name: Get HAProxy version.
  command: haproxy -v
  register: haproxy_version_result
  changed_when: false
  check_mode: false

- name: Set HAProxy version.
  set_fact:
    haproxy_version: "{{ '1.4' if '1.4.' in haproxy_version_result.stdout else '1.5' }}"

- name: generate dhparam
  community.crypto.openssl_dhparam:
    path: /etc/haproxy/dhparams.pem
    size: 2048

- name: generate acls
  template:
    src: backend.acl.j2
    dest: "/etc/haproxy/{{ item.key }}.acl"
    mode: 0644
  with_dict: "{{ haproxy_backends }}"

- name: Copy HAProxy configuration in place.
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    mode: 0644
    validate: haproxy -f %s -c -q
  notify: restart haproxy

- name: Ensure HAProxy is started and enabled on boot.
  service: name=haproxy state=started enabled=yes
